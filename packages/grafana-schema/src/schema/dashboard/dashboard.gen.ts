// This file is autogenerated. DO NOT EDIT.
//
// Derived from the Thema lineage at pkg/coremodel/dashboard/lineage.cue

export interface Dashboard {
  annotations?: {
    list: AnnotationQuery[];
  };
  description?: string;
  editable: boolean;
  fiscalYearStartMonth?: number;
  gnetId?: string;
  graphTooltip: DashboardCursorSync;
  id?: number;
  links?: DashboardLink[];
  liveNow?: boolean;
  panels?: Panel | {
      type: 'graph';
    } | {
      type: 'heatmap';
    } | {
      type: 'row';
      collapsed: boolean;
      id: number;
      panels: Panel | {
          type: 'graph';
        } | {
          type: 'heatmap';
        }[];
    }[];
  refresh?: string | false;
  schemaVersion: number;
  style: 'light' | 'dark';
  tags?: string[];
  templating?: {
    list: VariableModel[];
  };
  time?: {
    from: string;
    to: string;
  };
  timepicker?: {
    collapse: boolean;
    enable: boolean;
    hidden: boolean;
    refresh_intervals: string[];
  };
  timezone?: 'browser' | 'utc' | '';
  title?: string;
  uid?: string;
  version?: number;
  weekStart?: string;
}

export const defaultDashboard: Partial<Dashboard> = {
  editable: true,
  graphTooltip: DashboardCursorSync.Off,
  links: [],
  panels: [],
  schemaVersion: 36,
  style: 'dark',
  tags: [],
  timezone: 'browser',
};

export interface AnnotationQuery {
  builtIn: number;
  datasource: {};
  enable: boolean;
  hide?: boolean;
  iconColor?: string;
  name?: string;
  rawQuery?: string;
  showIn: number;
  target?: {};
  type: string;
}

export const defaultAnnotationQuery: Partial<AnnotationQuery> = {
  builtIn: 0,
  enable: true,
  hide: false,
  showIn: 0,
  type: 'dashboard',
};

export interface VariableModel {
  label?: string;
  name: string;
  type: VariableType;
}

export interface DashboardLink {
  asDropdown: boolean;
  icon?: string;
  includeVars: boolean;
  keepTime: boolean;
  tags: string[];
  targetBlank: boolean;
  title: string;
  tooltip?: string;
  type: DashboardLinkType;
  url?: string;
}

export const defaultDashboardLink: Partial<DashboardLink> = {
  asDropdown: false,
  includeVars: false,
  keepTime: false,
  tags: [],
  targetBlank: false,
};

export type DashboardLinkType = 'link' | 'dashboards';

export type VariableType = 'query' | 'adhoc' | 'constant' | 'datasource' | 'interval' | 'textbox' | 'custom' | 'system';

export enum FieldColorModeId {
  Continuous-GrYlRd = 'continuous-GrYlRd',
  Fixed = 'fixed',
  Palette-Classic = 'palette-classic',
  Palette-Saturated = 'palette-saturated',
  Thresholds = 'thresholds',
}

export type FieldColorSeriesByMode = 'min' | 'max' | 'last';

export interface FieldColor {
  fixedColor?: string;
  mode: FieldColorModeId | string;
  seriesBy?: FieldColorSeriesByMode;
}

export interface Threshold {
  color: string;
  state?: string;
  value?: number;
}

export enum ThresholdsMode {
  Absolute = 'absolute',
  Percentage = 'percentage',
}

export interface ThresholdsConfig {
  mode: ThresholdsMode;
  steps: Threshold[];
}

export const defaultThresholdsConfig: Partial<ThresholdsConfig> = {
  steps: [],
};

export interface Transformation {
  id: string;
  options: {};
}

export enum DashboardCursorSync {
  Crosshair = 1,
  Off = 0,
  Tooltip = 2,
}

export const defaultDashboardCursorSync: DashboardCursorSync = DashboardCursorSync.Off;

export interface Panel {
  datasource?: {};
  description?: string;
  fieldConfig: {
    defaults: {};
    overrides: {
      matcher: {
        id: string;
      };
      properties: {
        id: string;
      }[];
    }[];
  };
  gridPos?: {
    h: number;
    w: number;
    x: number;
    y: number;
  };
  id?: number;
  interval?: string;
  links?: DashboardLink[];
  maxDataPoints?: number;
  options: {};
  pluginVersion?: string;
  repeat?: string;
  repeatDirection: 'h' | 'v';
  tags?: string[];
  targets?: {}[];
  thresholds?: any[];
  timeFrom?: string;
  timeRegions?: any[];
  timeShift?: string;
  title?: string;
  transformations: Transformation[];
  transparent: boolean;
  type: string;
}

export const defaultPanel: Partial<Panel> = {
  links: [],
  repeatDirection: 'h',
  tags: [],
  targets: [],
  thresholds: [],
  timeRegions: [],
  transformations: [],
  transparent: false,
};
